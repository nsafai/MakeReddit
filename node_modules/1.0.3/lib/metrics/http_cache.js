'use strict';

var RequestMethod = require('../collector/request-method.js');
var cloudconf = require('../../cloudwise.js');

var PENDING = 1;
var RUNNING = 2;
var STOPPED = 3;
var HTTP_MAER = '_CLOUDWISE_ORIGINAL_SOURCE';

var remote = new RequestMethod({
    method: 'POST',
    host: '127.0.0.1',
    port: '26789',
    path: '/send',
    ssl: false
});


/**
 * 存储http请求数据
 * @constructor
 */
function HttpCache(request, response) {

    this.req = request;
    this.res = response;

    this.state = PENDING;
    this.start_time = 0;         //请求开始时间
    this.end_time = 0;           //请求结束时间l
    this.duration = 0;      //执行时间
    this.client_ip = '';    //客户端IP主机地址
    this.url = '';          //当前请求的元素URL
    this.call_times = 1;    //被调用次数
    this.response_code = 0; //响应状态码

}

/**
 *  记录开始
 * @returns {HttpCache}
 */
HttpCache.prototype.start = function () {
    if (this.state > PENDING) {
        return;
    }
    this.start = Date.now();

    this.state = RUNNING;

    return this;
};

/**
 * 记录结束
 * @returns {HttpCache}
 */
HttpCache.prototype.end = function () {
    if (this.state > RUNNING) {
        return;
    }
    this.end = Date.now();
    this.duration = this.end - this.start;

    this.state = STOPPED;

    return this;
};

/**
 * 判断是否正在记录
 * @returns {boolean}
 */
HttpCache.prototype.isRunning = function () {
    return this.state === RUNNING;
};

/**
 * 获取请求信息
 * @returns {HttpCache}
 */
HttpCache.prototype.handleRequest = function () {
    this.url = this.req.url;
    this.client_ip = getClientIp(this.req).split(':').length > 1 ? getClientIp(this.req).split(':')[3] : getClientIp(this.req);

    return this;
};

/**
 * 获取响应信息
 * @returns {HttpCache}
 */
HttpCache.prototype.handleResponse = function () {
    var res = this.res;
    if (res.statusCode !== undefined) {
        var statusCode = res.statusCode;
        if (typeof statusCode.toString === 'function') {
            var responseCode = statusCode.toString();
            if (typeof responseCode === 'string') {
                this.response_code = responseCode;
            }
        }

        var responseStatus = parseInt(statusCode, 10);
        if (responseStatus === responseStatus) { // check for NaN
            this.response_code = responseStatus;
        }
    }
    return this;
};

/**
 *发送http记录数据
 */
HttpCache.prototype.send = function () {
    var source = this.req[HTTP_MAER] || this.res[HTTP_MAER] || {};

    
    source.setHost_id(cloudconf.cloudwiseConf.HostId);
    var args = [
        cloudconf.cloudwiseConf.HostkKey + "_" + newGuid() + "@nj:" + cloudconf.cloudwiseConf.HostId + ":"  +Date.parse(new Date()),
        process.cwd(),
        this.req.headers.host,
        getIPAdress(),
        this.req.headers.host.split(':')[1],
        this.client_ip,
        this.url,
        this.start,
        this.call_times,
        this.duration*1000,
        '',
        '',
        '',
        this.response_code];

    source.addStart.apply(source, args);
    source.setAppName(cloudconf.cloudwiseConf.app_name);
    source.setIp(getIPAdress());
    source.setNodeTopic(cloudconf.cloudwiseConf.HostkKey + '_1005_' + (new Date).getTime());
    remote.invoke(source.getWowMap(), function (res) {
        var body = '';
        if (res.statusCode == 200) {
            res.on('data', function (data) {
                body += data;
            }).on('end', function () {
                //console.log(body);
            })
        } else {
            console.log('request is error!')
        }
    });
};

/**
 *  获取客户端ip
 * @param req
 * @returns {*}
 */
function getClientIp(req) {
    return req.headers['x-forwarded-for'] ||
        req.connection.remoteAddress ||
        req.socket.remoteAddress;
}

//获取Guid
function newGuid() {
    var guid = "";
    for (var i = 1; i <= 32; i++) {
        var n = Math.floor(Math.random() * 16.0).toString(16);
        guid += n;
        if ((i == 8) || (i == 12) || (i == 16) || (i == 20))
            guid += "-";
    }
    return guid;
}

function getIPAdress() {
    var interfaces = require('os').networkInterfaces();
    for (var devName in interfaces) {
        var iface = interfaces[devName];
        for (var i = 0; i < iface.length; i++) {
            var alias = iface[i];
            if (alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal) {
                return alias.address;
            }
        }
    }
}

module.exports = HttpCache;
