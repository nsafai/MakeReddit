'use strict';

var RequestMethod = require('../collector/request-method.js');
var cloudconf = require('../../cloudwise.js');
var sources = require('./source.js');
var logger = require('../logger').child({ component: 'sendAllRequest' });
var dgram = require('dgram');





/**
 * 存储http请求数据
 * @constructor
 */
function sendAllRequest() {

}





sendAllRequest.prototype.getMaps = function (transaction, source, TraceSegment) {

    var args0 = "{}"
    var args1 = 0
    if (typeof (TraceSegment.args) != "undefined" & TraceSegment.args != null) {
        if (TraceSegment.args.length > 0) {
            args0 = JSON.stringify(TraceSegment.args[0])
            if (TraceSegment.args.length > 1) {
                //args1 = JSON.stringify(TraceSegment.args[1])
				if(TraceSegment.args[1]!=undefined)
				{
					
					if (!isNaN(TraceSegment.args[1])) {
                    //alert("是数字");
                    args1 = TraceSegment.args[1]
                } else {

                    args1 = 0
                }
				}
				
            }

        }
    }
    //source.addMaps(TraceSegment.name, TraceSegment.timer.duration * 1000, "", "", "", "", TraceSegment.treeNB, "", TraceSegment.pst, 0, "", TraceSegment.ps, args0, args1, "1", TraceSegment.timer.start, transaction.trace.parameters['request.headers.host'], TraceSegment.service_type, TraceSegment.host)
    var instance_raw = "";
    var dbn_raw = ""
    var userName=""
    if (!(typeof (TraceSegment.host) == "undefined" || TraceSegment.host == null)) {
        instance_raw = TraceSegment.host + ":" + TraceSegment.port
    }
    if (!(typeof (TraceSegment.dbn_raw) == "undefined" || TraceSegment.dbn_raw == null)) {
        dbn_raw = TraceSegment.dbn_raw
    }
    if (!(typeof (TraceSegment.userName) == "undefined" || TraceSegment.userName == null)) {
        userName = TraceSegment.userName
    }
    source.addMaps(TraceSegment.name, TraceSegment.timer.duration * 1000, "", "", "", "", TraceSegment.treeNB, "", TraceSegment.pst, 0, "", TraceSegment.ps, args0, args1, "1", TraceSegment.timer.start, instance_raw, TraceSegment.service_type, dbn_raw, userName)
    if (typeof (TraceSegment.resouce) != "undefined" && TraceSegment.resouce != null) {
        source.addResources(TraceSegment.resouce.tag, TraceSegment.resouce.host, TraceSegment.resouce.dbName, TraceSegment.resouce.port, TraceSegment.resouce.userName);
    }
    if (TraceSegment.children.length > 0) {
        for (var i = 0; i < TraceSegment.children.length; i++) {
            this.getMaps(transaction, source, TraceSegment.children[i]);
        }
    }
}


sendAllRequest.prototype.TN = 1;
sendAllRequest.prototype.wowTree = {};

/**
 *发送http记录数据
 */
sendAllRequest.prototype.send = function (transaction) {
    var source = new sources()
    this.addTreeNB(transaction.webSegment, this.TN)
    this.getMaps(transaction, source, transaction.webSegment);

    //var cwConf = new cloudconf()
    source.setHost_id(global.HostId);
    source.setAppName("cloud wise");
    source.setIp(getIPAdress());
    source.setNodeTopic(global.HostKey + '_1005_' + (new Date).getTime());
    transaction.webSegment.cid = transaction.webSegment.cid.split(':').length > 1 ? transaction.webSegment.cid.split(':')[3] : "";
	
	var request_id="";
	console.log(transaction.webSegment.timeStack);
	//V1.3
	if(transaction.webSegment.eHostKeyStr!== undefined)
	{
		request_id=transaction.webSegment.eHostKeyStr+ ";nj:" + global.HostId + ":" + transaction.webSegment.timeStack+";";
	}
	else
	{
		request_id=global.HostKey + "_" + transaction.id + "@nj:" + global.HostId + ":" + transaction.webSegment.timeStack+";";
	}
	//transaction.webSegment.request_id=request_id;
	
    var args = [
    request_id,
    transaction.url,
    transaction.trace.parameters["request.headers.host"].split(':')[0],
    getIPAdress(),
    transaction.port,
    transaction.webSegment.cid,
    transaction.trace.parameters["request.headers.referer"],
    transaction.timer.start,
    1,
    transaction.timer.duration * 1000,
    '',
    '',
    '',
    transaction.statusCode];
    source.addStart.apply(source, args);
    this.GenerateTreeStruct(transaction.webSegment, this.wowTree)
    source.setTree(this.wowTree)
    this.wowTree = {}
    var senddata = { "Content": JSON.stringify(source.getWowMap()), "RoutingKey": "nodeTopic", "Method": "post", "ApiEnum": "1", "ObjID": "nodejsTracerSeg_b89373d2-7ec0-4b27-9c44-4cb05c203660" };
    if (transaction.statusCode < 400) {
        if (global.TransferProtocol == "udp") {
            var message = new Buffer(JSON.stringify(senddata));
            var client = dgram.createSocket("udp4");
            client.send(message, 0, message.length, global.SendProxyUdpPort, global.SendProxyHost, function (err, bytes) {
                client.close();
            });
            client.on("close", function () {
                logger.debug("send 1 done the content is :" + JSON.stringify(senddata));
            });
        }
        else {
            var remote = new RequestMethod({
                method: 'POST',
                host: global.SendProxyHost,
                port: global.SendProxyTcpPort,
                path: '/send',
                ssl: false
            });
            remote.invoke(senddata, function (res) {
                var body = '';
                if (res.statusCode == 200) {
                    res.on('data', function (data) {
                        body += data;
                    }).on('end', function () {
                        //console.log(body);
                        logger.debug("send 1 done the content is :" + JSON.stringify(senddata));

                    })
                } else {
                    logger.debug("send error");
                    console.log('request is error!')
                }
            });
        }
    }
};





sendAllRequest.prototype.GenerateTreeStruct = function (dom, wowTree) {
    var mapTree = {};
    wowTree[dom.treeNB] = mapTree;
    if (dom.children.length > 0) {
        for (var i = 0; i < dom.children.length; i++) {
            this.GenerateTreeStruct(dom.children[i], wowTree[dom.treeNB]);
        }
    }
}


sendAllRequest.prototype.addTreeNB = function (TraceSegment) {
    TraceSegment.treeNB = this.TN;
    if (TraceSegment.children.length > 0) {
        for (var i = 0; i < TraceSegment.children.length; i++) {
            this.TN += 1
            this.addTreeNB(TraceSegment.children[i]);
        }
    }
}



function getIPAdress() {
    var interfaces = require('os').networkInterfaces();
    for (var devName in interfaces) {
        var iface = interfaces[devName];
        for (var i = 0; i < iface.length; i++) {
            var alias = iface[i];
            if (alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal) {
                return alias.address;
            }
        }
    }
}


module.exports = sendAllRequest;
